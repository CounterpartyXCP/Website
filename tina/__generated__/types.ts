//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  contribute: Contribute;
  contributeConnection: ContributeConnection;
  header: Header;
  headerConnection: HeaderConnection;
  whatiscounterparty: Whatiscounterparty;
  whatiscounterpartyConnection: WhatiscounterpartyConnection;
  wallet: Wallet;
  walletConnection: WalletConnection;
  walletsPage: WalletsPage;
  walletsPageConnection: WalletsPageConnection;
  explorer: Explorer;
  explorerConnection: ExplorerConnection;
  explorersPage: ExplorersPage;
  explorersPageConnection: ExplorersPageConnection;
  marketplaces: Marketplaces;
  marketplacesConnection: MarketplacesConnection;
  news: News;
  newsConnection: NewsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContributeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContributeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContributeFilter>;
};


export type QueryHeaderArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeaderConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeaderFilter>;
};


export type QueryWhatiscounterpartyArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWhatiscounterpartyConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WhatiscounterpartyFilter>;
};


export type QueryWalletArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWalletConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WalletFilter>;
};


export type QueryWalletsPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWalletsPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WalletsPageFilter>;
};


export type QueryExplorerArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryExplorerConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ExplorerFilter>;
};


export type QueryExplorersPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryExplorersPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ExplorersPageFilter>;
};


export type QueryMarketplacesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMarketplacesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MarketplacesFilter>;
};


export type QueryNewsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
};

export type DocumentFilter = {
  contribute?: InputMaybe<ContributeFilter>;
  header?: InputMaybe<HeaderFilter>;
  whatiscounterparty?: InputMaybe<WhatiscounterpartyFilter>;
  wallet?: InputMaybe<WalletFilter>;
  walletsPage?: InputMaybe<WalletsPageFilter>;
  explorer?: InputMaybe<ExplorerFilter>;
  explorersPage?: InputMaybe<ExplorersPageFilter>;
  marketplaces?: InputMaybe<MarketplacesFilter>;
  news?: InputMaybe<NewsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Contribute | Header | Whatiscounterparty | Wallet | WalletsPage | Explorer | ExplorersPage | Marketplaces | News | Folder;

export type ContributeDevelopmentLinks = {
  __typename?: 'ContributeDevelopmentLinks';
  title?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type ContributeCommunityLinks = {
  __typename?: 'ContributeCommunityLinks';
  title?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type Contribute = Node & Document & {
  __typename?: 'Contribute';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  developmentTitle?: Maybe<Scalars['String']['output']>;
  communityTitle?: Maybe<Scalars['String']['output']>;
  developmentLinks?: Maybe<Array<Maybe<ContributeDevelopmentLinks>>>;
  communityLinks?: Maybe<Array<Maybe<ContributeCommunityLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ContributeDevelopmentLinksFilter = {
  title?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type ContributeCommunityLinksFilter = {
  title?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type ContributeFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  developmentTitle?: InputMaybe<StringFilter>;
  communityTitle?: InputMaybe<StringFilter>;
  developmentLinks?: InputMaybe<ContributeDevelopmentLinksFilter>;
  communityLinks?: InputMaybe<ContributeCommunityLinksFilter>;
};

export type ContributeConnectionEdges = {
  __typename?: 'ContributeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Contribute>;
};

export type ContributeConnection = Connection & {
  __typename?: 'ContributeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContributeConnectionEdges>>>;
};

export type HeaderCtaButtons = {
  __typename?: 'HeaderCtaButtons';
  label?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type Header = Node & Document & {
  __typename?: 'Header';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  ctaButtons?: Maybe<Array<Maybe<HeaderCtaButtons>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HeaderCtaButtonsFilter = {
  label?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type HeaderFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ctaButtons?: InputMaybe<HeaderCtaButtonsFilter>;
};

export type HeaderConnectionEdges = {
  __typename?: 'HeaderConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Header>;
};

export type HeaderConnection = Connection & {
  __typename?: 'HeaderConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HeaderConnectionEdges>>>;
};

export type WhatiscounterpartyKeyFeatures = {
  __typename?: 'WhatiscounterpartyKeyFeatures';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type Whatiscounterparty = Node & Document & {
  __typename?: 'Whatiscounterparty';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['JSON']['output']>;
  keyFeatures?: Maybe<Array<Maybe<WhatiscounterpartyKeyFeatures>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type WhatiscounterpartyKeyFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<ImageFilter>;
};

export type WhatiscounterpartyFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  keyFeatures?: InputMaybe<WhatiscounterpartyKeyFeaturesFilter>;
};

export type WhatiscounterpartyConnectionEdges = {
  __typename?: 'WhatiscounterpartyConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Whatiscounterparty>;
};

export type WhatiscounterpartyConnection = Connection & {
  __typename?: 'WhatiscounterpartyConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<WhatiscounterpartyConnectionEdges>>>;
};

export type WalletFeatures = {
  __typename?: 'WalletFeatures';
  dispensers?: Maybe<Scalars['Boolean']['output']>;
  assetCreation?: Maybe<Scalars['Boolean']['output']>;
  dex?: Maybe<Scalars['Boolean']['output']>;
};

export type WalletPlatforms = {
  __typename?: 'WalletPlatforms';
  web?: Maybe<Scalars['Boolean']['output']>;
  mobile?: Maybe<Scalars['Boolean']['output']>;
  desktop?: Maybe<Scalars['Boolean']['output']>;
};

export type Wallet = Node & Document & {
  __typename?: 'Wallet';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  features?: Maybe<WalletFeatures>;
  platforms?: Maybe<WalletPlatforms>;
  isV104Compatible?: Maybe<Scalars['Boolean']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  telegram?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type WalletFeaturesFilter = {
  dispensers?: InputMaybe<BooleanFilter>;
  assetCreation?: InputMaybe<BooleanFilter>;
  dex?: InputMaybe<BooleanFilter>;
};

export type WalletPlatformsFilter = {
  web?: InputMaybe<BooleanFilter>;
  mobile?: InputMaybe<BooleanFilter>;
  desktop?: InputMaybe<BooleanFilter>;
};

export type WalletFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  features?: InputMaybe<WalletFeaturesFilter>;
  platforms?: InputMaybe<WalletPlatformsFilter>;
  isV104Compatible?: InputMaybe<BooleanFilter>;
  twitter?: InputMaybe<StringFilter>;
  telegram?: InputMaybe<StringFilter>;
};

export type WalletConnectionEdges = {
  __typename?: 'WalletConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Wallet>;
};

export type WalletConnection = Connection & {
  __typename?: 'WalletConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<WalletConnectionEdges>>>;
};

export type WalletsPage = Node & Document & {
  __typename?: 'WalletsPage';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  info?: Maybe<Scalars['JSON']['output']>;
  walletList?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type WalletsPageFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  info?: InputMaybe<RichTextFilter>;
  walletList?: InputMaybe<StringFilter>;
};

export type WalletsPageConnectionEdges = {
  __typename?: 'WalletsPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<WalletsPage>;
};

export type WalletsPageConnection = Connection & {
  __typename?: 'WalletsPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<WalletsPageConnectionEdges>>>;
};

export type Explorer = Node & Document & {
  __typename?: 'Explorer';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ExplorerFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  type?: InputMaybe<StringFilter>;
};

export type ExplorerConnectionEdges = {
  __typename?: 'ExplorerConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Explorer>;
};

export type ExplorerConnection = Connection & {
  __typename?: 'ExplorerConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ExplorerConnectionEdges>>>;
};

export type ExplorersPage = Node & Document & {
  __typename?: 'ExplorersPage';
  title?: Maybe<Scalars['String']['output']>;
  generalPurposeIntro?: Maybe<Scalars['JSON']['output']>;
  themedIntro?: Maybe<Scalars['JSON']['output']>;
  explorerList?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ExplorersPageFilter = {
  title?: InputMaybe<StringFilter>;
  generalPurposeIntro?: InputMaybe<RichTextFilter>;
  themedIntro?: InputMaybe<RichTextFilter>;
  explorerList?: InputMaybe<StringFilter>;
};

export type ExplorersPageConnectionEdges = {
  __typename?: 'ExplorersPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ExplorersPage>;
};

export type ExplorersPageConnection = Connection & {
  __typename?: 'ExplorersPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ExplorersPageConnectionEdges>>>;
};

export type MarketplacesMarketplaceList = {
  __typename?: 'MarketplacesMarketplaceList';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
};

export type Marketplaces = Node & Document & {
  __typename?: 'Marketplaces';
  title?: Maybe<Scalars['String']['output']>;
  introduction?: Maybe<Scalars['JSON']['output']>;
  marketplaceList?: Maybe<Array<Maybe<MarketplacesMarketplaceList>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type MarketplacesMarketplaceListFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
};

export type MarketplacesFilter = {
  title?: InputMaybe<StringFilter>;
  introduction?: InputMaybe<RichTextFilter>;
  marketplaceList?: InputMaybe<MarketplacesMarketplaceListFilter>;
};

export type MarketplacesConnectionEdges = {
  __typename?: 'MarketplacesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Marketplaces>;
};

export type MarketplacesConnection = Connection & {
  __typename?: 'MarketplacesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MarketplacesConnectionEdges>>>;
};

export type News = Node & Document & {
  __typename?: 'News';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  status: Scalars['String']['output'];
  author: Scalars['String']['output'];
  excerpt?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  image?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NewsFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  slug?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  categories?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type NewsConnectionEdges = {
  __typename?: 'NewsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<News>;
};

export type NewsConnection = Connection & {
  __typename?: 'NewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NewsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateContribute: Contribute;
  createContribute: Contribute;
  updateHeader: Header;
  createHeader: Header;
  updateWhatiscounterparty: Whatiscounterparty;
  createWhatiscounterparty: Whatiscounterparty;
  updateWallet: Wallet;
  createWallet: Wallet;
  updateWalletsPage: WalletsPage;
  createWalletsPage: WalletsPage;
  updateExplorer: Explorer;
  createExplorer: Explorer;
  updateExplorersPage: ExplorersPage;
  createExplorersPage: ExplorersPage;
  updateMarketplaces: Marketplaces;
  createMarketplaces: Marketplaces;
  updateNews: News;
  createNews: News;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateContributeArgs = {
  relativePath: Scalars['String']['input'];
  params: ContributeMutation;
};


export type MutationCreateContributeArgs = {
  relativePath: Scalars['String']['input'];
  params: ContributeMutation;
};


export type MutationUpdateHeaderArgs = {
  relativePath: Scalars['String']['input'];
  params: HeaderMutation;
};


export type MutationCreateHeaderArgs = {
  relativePath: Scalars['String']['input'];
  params: HeaderMutation;
};


export type MutationUpdateWhatiscounterpartyArgs = {
  relativePath: Scalars['String']['input'];
  params: WhatiscounterpartyMutation;
};


export type MutationCreateWhatiscounterpartyArgs = {
  relativePath: Scalars['String']['input'];
  params: WhatiscounterpartyMutation;
};


export type MutationUpdateWalletArgs = {
  relativePath: Scalars['String']['input'];
  params: WalletMutation;
};


export type MutationCreateWalletArgs = {
  relativePath: Scalars['String']['input'];
  params: WalletMutation;
};


export type MutationUpdateWalletsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: WalletsPageMutation;
};


export type MutationCreateWalletsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: WalletsPageMutation;
};


export type MutationUpdateExplorerArgs = {
  relativePath: Scalars['String']['input'];
  params: ExplorerMutation;
};


export type MutationCreateExplorerArgs = {
  relativePath: Scalars['String']['input'];
  params: ExplorerMutation;
};


export type MutationUpdateExplorersPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ExplorersPageMutation;
};


export type MutationCreateExplorersPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ExplorersPageMutation;
};


export type MutationUpdateMarketplacesArgs = {
  relativePath: Scalars['String']['input'];
  params: MarketplacesMutation;
};


export type MutationCreateMarketplacesArgs = {
  relativePath: Scalars['String']['input'];
  params: MarketplacesMutation;
};


export type MutationUpdateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};


export type MutationCreateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};

export type DocumentUpdateMutation = {
  contribute?: InputMaybe<ContributeMutation>;
  header?: InputMaybe<HeaderMutation>;
  whatiscounterparty?: InputMaybe<WhatiscounterpartyMutation>;
  wallet?: InputMaybe<WalletMutation>;
  walletsPage?: InputMaybe<WalletsPageMutation>;
  explorer?: InputMaybe<ExplorerMutation>;
  explorersPage?: InputMaybe<ExplorersPageMutation>;
  marketplaces?: InputMaybe<MarketplacesMutation>;
  news?: InputMaybe<NewsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  contribute?: InputMaybe<ContributeMutation>;
  header?: InputMaybe<HeaderMutation>;
  whatiscounterparty?: InputMaybe<WhatiscounterpartyMutation>;
  wallet?: InputMaybe<WalletMutation>;
  walletsPage?: InputMaybe<WalletsPageMutation>;
  explorer?: InputMaybe<ExplorerMutation>;
  explorersPage?: InputMaybe<ExplorersPageMutation>;
  marketplaces?: InputMaybe<MarketplacesMutation>;
  news?: InputMaybe<NewsMutation>;
};

export type ContributeDevelopmentLinksMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type ContributeCommunityLinksMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type ContributeMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  developmentTitle?: InputMaybe<Scalars['String']['input']>;
  communityTitle?: InputMaybe<Scalars['String']['input']>;
  developmentLinks?: InputMaybe<Array<InputMaybe<ContributeDevelopmentLinksMutation>>>;
  communityLinks?: InputMaybe<Array<InputMaybe<ContributeCommunityLinksMutation>>>;
};

export type HeaderCtaButtonsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type HeaderMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ctaButtons?: InputMaybe<Array<InputMaybe<HeaderCtaButtonsMutation>>>;
};

export type WhatiscounterpartyKeyFeaturesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type WhatiscounterpartyMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  keyFeatures?: InputMaybe<Array<InputMaybe<WhatiscounterpartyKeyFeaturesMutation>>>;
};

export type WalletFeaturesMutation = {
  dispensers?: InputMaybe<Scalars['Boolean']['input']>;
  assetCreation?: InputMaybe<Scalars['Boolean']['input']>;
  dex?: InputMaybe<Scalars['Boolean']['input']>;
};

export type WalletPlatformsMutation = {
  web?: InputMaybe<Scalars['Boolean']['input']>;
  mobile?: InputMaybe<Scalars['Boolean']['input']>;
  desktop?: InputMaybe<Scalars['Boolean']['input']>;
};

export type WalletMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<WalletFeaturesMutation>;
  platforms?: InputMaybe<WalletPlatformsMutation>;
  isV104Compatible?: InputMaybe<Scalars['Boolean']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
  telegram?: InputMaybe<Scalars['String']['input']>;
};

export type WalletsPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  walletList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ExplorerMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type ExplorersPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  generalPurposeIntro?: InputMaybe<Scalars['JSON']['input']>;
  themedIntro?: InputMaybe<Scalars['JSON']['input']>;
  explorerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type MarketplacesMarketplaceListMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
};

export type MarketplacesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  introduction?: InputMaybe<Scalars['JSON']['input']>;
  marketplaceList?: InputMaybe<Array<InputMaybe<MarketplacesMarketplaceListMutation>>>;
};

export type NewsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ContributePartsFragment = { __typename: 'Contribute', title?: string | null, subtitle?: string | null, developmentTitle?: string | null, communityTitle?: string | null, developmentLinks?: Array<{ __typename: 'ContributeDevelopmentLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null, communityLinks?: Array<{ __typename: 'ContributeCommunityLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null };

export type HeaderPartsFragment = { __typename: 'Header', title: string, description?: string | null, ctaButtons?: Array<{ __typename: 'HeaderCtaButtons', label?: string | null, link?: string | null } | null> | null };

export type WhatiscounterpartyPartsFragment = { __typename: 'Whatiscounterparty', title: string, description?: any | null, keyFeatures?: Array<{ __typename: 'WhatiscounterpartyKeyFeatures', title?: string | null, description?: string | null, icon?: string | null } | null> | null };

export type WalletPartsFragment = { __typename: 'Wallet', title: string, description?: string | null, link?: string | null, logo?: string | null, isV104Compatible?: boolean | null, twitter?: string | null, telegram?: string | null, features?: { __typename: 'WalletFeatures', dispensers?: boolean | null, assetCreation?: boolean | null, dex?: boolean | null } | null, platforms?: { __typename: 'WalletPlatforms', web?: boolean | null, mobile?: boolean | null, desktop?: boolean | null } | null };

export type WalletsPagePartsFragment = { __typename: 'WalletsPage', title?: string | null, subtitle?: string | null, info?: any | null, walletList?: Array<string | null> | null };

export type ExplorerPartsFragment = { __typename: 'Explorer', title: string, description?: string | null, link?: string | null, logo?: string | null, type?: string | null };

export type ExplorersPagePartsFragment = { __typename: 'ExplorersPage', title?: string | null, generalPurposeIntro?: any | null, themedIntro?: any | null, explorerList?: Array<string | null> | null };

export type MarketplacesPartsFragment = { __typename: 'Marketplaces', title?: string | null, introduction?: any | null, marketplaceList?: Array<{ __typename: 'MarketplacesMarketplaceList', name?: string | null, description?: string | null, link?: string | null, logo?: string | null } | null> | null };

export type NewsPartsFragment = { __typename: 'News', title: string, date: string, slug: string, status: string, author: string, excerpt?: string | null, categories?: Array<string | null> | null, tags?: Array<string | null> | null, image?: string | null, body?: any | null };

export type ContributeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContributeQuery = { __typename?: 'Query', contribute: { __typename: 'Contribute', id: string, title?: string | null, subtitle?: string | null, developmentTitle?: string | null, communityTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, developmentLinks?: Array<{ __typename: 'ContributeDevelopmentLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null, communityLinks?: Array<{ __typename: 'ContributeCommunityLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null } };

export type ContributeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContributeFilter>;
}>;


export type ContributeConnectionQuery = { __typename?: 'Query', contributeConnection: { __typename?: 'ContributeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContributeConnectionEdges', cursor: string, node?: { __typename: 'Contribute', id: string, title?: string | null, subtitle?: string | null, developmentTitle?: string | null, communityTitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, developmentLinks?: Array<{ __typename: 'ContributeDevelopmentLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null, communityLinks?: Array<{ __typename: 'ContributeCommunityLinks', title?: string | null, url?: string | null, icon?: string | null } | null> | null } | null } | null> | null } };

export type HeaderQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HeaderQuery = { __typename?: 'Query', header: { __typename: 'Header', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, ctaButtons?: Array<{ __typename: 'HeaderCtaButtons', label?: string | null, link?: string | null } | null> | null } };

export type HeaderConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeaderFilter>;
}>;


export type HeaderConnectionQuery = { __typename?: 'Query', headerConnection: { __typename?: 'HeaderConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeaderConnectionEdges', cursor: string, node?: { __typename: 'Header', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, ctaButtons?: Array<{ __typename: 'HeaderCtaButtons', label?: string | null, link?: string | null } | null> | null } | null } | null> | null } };

export type WhatiscounterpartyQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type WhatiscounterpartyQuery = { __typename?: 'Query', whatiscounterparty: { __typename: 'Whatiscounterparty', id: string, title: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, keyFeatures?: Array<{ __typename: 'WhatiscounterpartyKeyFeatures', title?: string | null, description?: string | null, icon?: string | null } | null> | null } };

export type WhatiscounterpartyConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WhatiscounterpartyFilter>;
}>;


export type WhatiscounterpartyConnectionQuery = { __typename?: 'Query', whatiscounterpartyConnection: { __typename?: 'WhatiscounterpartyConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WhatiscounterpartyConnectionEdges', cursor: string, node?: { __typename: 'Whatiscounterparty', id: string, title: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, keyFeatures?: Array<{ __typename: 'WhatiscounterpartyKeyFeatures', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | null } | null> | null } };

export type WalletQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type WalletQuery = { __typename?: 'Query', wallet: { __typename: 'Wallet', id: string, title: string, description?: string | null, link?: string | null, logo?: string | null, isV104Compatible?: boolean | null, twitter?: string | null, telegram?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: { __typename: 'WalletFeatures', dispensers?: boolean | null, assetCreation?: boolean | null, dex?: boolean | null } | null, platforms?: { __typename: 'WalletPlatforms', web?: boolean | null, mobile?: boolean | null, desktop?: boolean | null } | null } };

export type WalletConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WalletFilter>;
}>;


export type WalletConnectionQuery = { __typename?: 'Query', walletConnection: { __typename?: 'WalletConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WalletConnectionEdges', cursor: string, node?: { __typename: 'Wallet', id: string, title: string, description?: string | null, link?: string | null, logo?: string | null, isV104Compatible?: boolean | null, twitter?: string | null, telegram?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: { __typename: 'WalletFeatures', dispensers?: boolean | null, assetCreation?: boolean | null, dex?: boolean | null } | null, platforms?: { __typename: 'WalletPlatforms', web?: boolean | null, mobile?: boolean | null, desktop?: boolean | null } | null } | null } | null> | null } };

export type WalletsPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type WalletsPageQuery = { __typename?: 'Query', walletsPage: { __typename: 'WalletsPage', id: string, title?: string | null, subtitle?: string | null, info?: any | null, walletList?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type WalletsPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WalletsPageFilter>;
}>;


export type WalletsPageConnectionQuery = { __typename?: 'Query', walletsPageConnection: { __typename?: 'WalletsPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WalletsPageConnectionEdges', cursor: string, node?: { __typename: 'WalletsPage', id: string, title?: string | null, subtitle?: string | null, info?: any | null, walletList?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ExplorerQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ExplorerQuery = { __typename?: 'Query', explorer: { __typename: 'Explorer', id: string, title: string, description?: string | null, link?: string | null, logo?: string | null, type?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ExplorerConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ExplorerFilter>;
}>;


export type ExplorerConnectionQuery = { __typename?: 'Query', explorerConnection: { __typename?: 'ExplorerConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ExplorerConnectionEdges', cursor: string, node?: { __typename: 'Explorer', id: string, title: string, description?: string | null, link?: string | null, logo?: string | null, type?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ExplorersPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ExplorersPageQuery = { __typename?: 'Query', explorersPage: { __typename: 'ExplorersPage', id: string, title?: string | null, generalPurposeIntro?: any | null, themedIntro?: any | null, explorerList?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ExplorersPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ExplorersPageFilter>;
}>;


export type ExplorersPageConnectionQuery = { __typename?: 'Query', explorersPageConnection: { __typename?: 'ExplorersPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ExplorersPageConnectionEdges', cursor: string, node?: { __typename: 'ExplorersPage', id: string, title?: string | null, generalPurposeIntro?: any | null, themedIntro?: any | null, explorerList?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MarketplacesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MarketplacesQuery = { __typename?: 'Query', marketplaces: { __typename: 'Marketplaces', id: string, title?: string | null, introduction?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, marketplaceList?: Array<{ __typename: 'MarketplacesMarketplaceList', name?: string | null, description?: string | null, link?: string | null, logo?: string | null } | null> | null } };

export type MarketplacesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MarketplacesFilter>;
}>;


export type MarketplacesConnectionQuery = { __typename?: 'Query', marketplacesConnection: { __typename?: 'MarketplacesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MarketplacesConnectionEdges', cursor: string, node?: { __typename: 'Marketplaces', id: string, title?: string | null, introduction?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, marketplaceList?: Array<{ __typename: 'MarketplacesMarketplaceList', name?: string | null, description?: string | null, link?: string | null, logo?: string | null } | null> | null } | null } | null> | null } };

export type NewsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NewsQuery = { __typename?: 'Query', news: { __typename: 'News', id: string, title: string, date: string, slug: string, status: string, author: string, excerpt?: string | null, categories?: Array<string | null> | null, tags?: Array<string | null> | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type NewsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
}>;


export type NewsConnectionQuery = { __typename?: 'Query', newsConnection: { __typename?: 'NewsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NewsConnectionEdges', cursor: string, node?: { __typename: 'News', id: string, title: string, date: string, slug: string, status: string, author: string, excerpt?: string | null, categories?: Array<string | null> | null, tags?: Array<string | null> | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const ContributePartsFragmentDoc = gql`
    fragment ContributeParts on Contribute {
  __typename
  title
  subtitle
  developmentTitle
  communityTitle
  developmentLinks {
    __typename
    title
    url
    icon
  }
  communityLinks {
    __typename
    title
    url
    icon
  }
}
    `;
export const HeaderPartsFragmentDoc = gql`
    fragment HeaderParts on Header {
  __typename
  title
  description
  ctaButtons {
    __typename
    label
    link
  }
}
    `;
export const WhatiscounterpartyPartsFragmentDoc = gql`
    fragment WhatiscounterpartyParts on Whatiscounterparty {
  __typename
  title
  description
  keyFeatures {
    __typename
    title
    description
    icon
  }
}
    `;
export const WalletPartsFragmentDoc = gql`
    fragment WalletParts on Wallet {
  __typename
  title
  description
  link
  logo
  features {
    __typename
    dispensers
    assetCreation
    dex
  }
  platforms {
    __typename
    web
    mobile
    desktop
  }
  isV104Compatible
  twitter
  telegram
}
    `;
export const WalletsPagePartsFragmentDoc = gql`
    fragment WalletsPageParts on WalletsPage {
  __typename
  title
  subtitle
  info
  walletList
}
    `;
export const ExplorerPartsFragmentDoc = gql`
    fragment ExplorerParts on Explorer {
  __typename
  title
  description
  link
  logo
  type
}
    `;
export const ExplorersPagePartsFragmentDoc = gql`
    fragment ExplorersPageParts on ExplorersPage {
  __typename
  title
  generalPurposeIntro
  themedIntro
  explorerList
}
    `;
export const MarketplacesPartsFragmentDoc = gql`
    fragment MarketplacesParts on Marketplaces {
  __typename
  title
  introduction
  marketplaceList {
    __typename
    name
    description
    link
    logo
  }
}
    `;
export const NewsPartsFragmentDoc = gql`
    fragment NewsParts on News {
  __typename
  title
  date
  slug
  status
  author
  excerpt
  categories
  tags
  image
  body
}
    `;
export const ContributeDocument = gql`
    query contribute($relativePath: String!) {
  contribute(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContributeParts
  }
}
    ${ContributePartsFragmentDoc}`;
export const ContributeConnectionDocument = gql`
    query contributeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContributeFilter) {
  contributeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContributeParts
      }
    }
  }
}
    ${ContributePartsFragmentDoc}`;
export const HeaderDocument = gql`
    query header($relativePath: String!) {
  header(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeaderParts
  }
}
    ${HeaderPartsFragmentDoc}`;
export const HeaderConnectionDocument = gql`
    query headerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeaderFilter) {
  headerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeaderParts
      }
    }
  }
}
    ${HeaderPartsFragmentDoc}`;
export const WhatiscounterpartyDocument = gql`
    query whatiscounterparty($relativePath: String!) {
  whatiscounterparty(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WhatiscounterpartyParts
  }
}
    ${WhatiscounterpartyPartsFragmentDoc}`;
export const WhatiscounterpartyConnectionDocument = gql`
    query whatiscounterpartyConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WhatiscounterpartyFilter) {
  whatiscounterpartyConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WhatiscounterpartyParts
      }
    }
  }
}
    ${WhatiscounterpartyPartsFragmentDoc}`;
export const WalletDocument = gql`
    query wallet($relativePath: String!) {
  wallet(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WalletParts
  }
}
    ${WalletPartsFragmentDoc}`;
export const WalletConnectionDocument = gql`
    query walletConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WalletFilter) {
  walletConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WalletParts
      }
    }
  }
}
    ${WalletPartsFragmentDoc}`;
export const WalletsPageDocument = gql`
    query walletsPage($relativePath: String!) {
  walletsPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WalletsPageParts
  }
}
    ${WalletsPagePartsFragmentDoc}`;
export const WalletsPageConnectionDocument = gql`
    query walletsPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WalletsPageFilter) {
  walletsPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WalletsPageParts
      }
    }
  }
}
    ${WalletsPagePartsFragmentDoc}`;
export const ExplorerDocument = gql`
    query explorer($relativePath: String!) {
  explorer(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ExplorerParts
  }
}
    ${ExplorerPartsFragmentDoc}`;
export const ExplorerConnectionDocument = gql`
    query explorerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ExplorerFilter) {
  explorerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ExplorerParts
      }
    }
  }
}
    ${ExplorerPartsFragmentDoc}`;
export const ExplorersPageDocument = gql`
    query explorersPage($relativePath: String!) {
  explorersPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ExplorersPageParts
  }
}
    ${ExplorersPagePartsFragmentDoc}`;
export const ExplorersPageConnectionDocument = gql`
    query explorersPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ExplorersPageFilter) {
  explorersPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ExplorersPageParts
      }
    }
  }
}
    ${ExplorersPagePartsFragmentDoc}`;
export const MarketplacesDocument = gql`
    query marketplaces($relativePath: String!) {
  marketplaces(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MarketplacesParts
  }
}
    ${MarketplacesPartsFragmentDoc}`;
export const MarketplacesConnectionDocument = gql`
    query marketplacesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MarketplacesFilter) {
  marketplacesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MarketplacesParts
      }
    }
  }
}
    ${MarketplacesPartsFragmentDoc}`;
export const NewsDocument = gql`
    query news($relativePath: String!) {
  news(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NewsParts
  }
}
    ${NewsPartsFragmentDoc}`;
export const NewsConnectionDocument = gql`
    query newsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NewsFilter) {
  newsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NewsParts
      }
    }
  }
}
    ${NewsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      contribute(variables: ContributeQueryVariables, options?: C): Promise<{data: ContributeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContributeQueryVariables, query: string}> {
        return requester<{data: ContributeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContributeQueryVariables, query: string}, ContributeQueryVariables>(ContributeDocument, variables, options);
      },
    contributeConnection(variables?: ContributeConnectionQueryVariables, options?: C): Promise<{data: ContributeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContributeConnectionQueryVariables, query: string}> {
        return requester<{data: ContributeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContributeConnectionQueryVariables, query: string}, ContributeConnectionQueryVariables>(ContributeConnectionDocument, variables, options);
      },
    header(variables: HeaderQueryVariables, options?: C): Promise<{data: HeaderQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderQueryVariables, query: string}> {
        return requester<{data: HeaderQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderQueryVariables, query: string}, HeaderQueryVariables>(HeaderDocument, variables, options);
      },
    headerConnection(variables?: HeaderConnectionQueryVariables, options?: C): Promise<{data: HeaderConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderConnectionQueryVariables, query: string}> {
        return requester<{data: HeaderConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderConnectionQueryVariables, query: string}, HeaderConnectionQueryVariables>(HeaderConnectionDocument, variables, options);
      },
    whatiscounterparty(variables: WhatiscounterpartyQueryVariables, options?: C): Promise<{data: WhatiscounterpartyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhatiscounterpartyQueryVariables, query: string}> {
        return requester<{data: WhatiscounterpartyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhatiscounterpartyQueryVariables, query: string}, WhatiscounterpartyQueryVariables>(WhatiscounterpartyDocument, variables, options);
      },
    whatiscounterpartyConnection(variables?: WhatiscounterpartyConnectionQueryVariables, options?: C): Promise<{data: WhatiscounterpartyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhatiscounterpartyConnectionQueryVariables, query: string}> {
        return requester<{data: WhatiscounterpartyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhatiscounterpartyConnectionQueryVariables, query: string}, WhatiscounterpartyConnectionQueryVariables>(WhatiscounterpartyConnectionDocument, variables, options);
      },
    wallet(variables: WalletQueryVariables, options?: C): Promise<{data: WalletQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletQueryVariables, query: string}> {
        return requester<{data: WalletQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletQueryVariables, query: string}, WalletQueryVariables>(WalletDocument, variables, options);
      },
    walletConnection(variables?: WalletConnectionQueryVariables, options?: C): Promise<{data: WalletConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletConnectionQueryVariables, query: string}> {
        return requester<{data: WalletConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletConnectionQueryVariables, query: string}, WalletConnectionQueryVariables>(WalletConnectionDocument, variables, options);
      },
    walletsPage(variables: WalletsPageQueryVariables, options?: C): Promise<{data: WalletsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletsPageQueryVariables, query: string}> {
        return requester<{data: WalletsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletsPageQueryVariables, query: string}, WalletsPageQueryVariables>(WalletsPageDocument, variables, options);
      },
    walletsPageConnection(variables?: WalletsPageConnectionQueryVariables, options?: C): Promise<{data: WalletsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletsPageConnectionQueryVariables, query: string}> {
        return requester<{data: WalletsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WalletsPageConnectionQueryVariables, query: string}, WalletsPageConnectionQueryVariables>(WalletsPageConnectionDocument, variables, options);
      },
    explorer(variables: ExplorerQueryVariables, options?: C): Promise<{data: ExplorerQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorerQueryVariables, query: string}> {
        return requester<{data: ExplorerQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorerQueryVariables, query: string}, ExplorerQueryVariables>(ExplorerDocument, variables, options);
      },
    explorerConnection(variables?: ExplorerConnectionQueryVariables, options?: C): Promise<{data: ExplorerConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorerConnectionQueryVariables, query: string}> {
        return requester<{data: ExplorerConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorerConnectionQueryVariables, query: string}, ExplorerConnectionQueryVariables>(ExplorerConnectionDocument, variables, options);
      },
    explorersPage(variables: ExplorersPageQueryVariables, options?: C): Promise<{data: ExplorersPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorersPageQueryVariables, query: string}> {
        return requester<{data: ExplorersPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorersPageQueryVariables, query: string}, ExplorersPageQueryVariables>(ExplorersPageDocument, variables, options);
      },
    explorersPageConnection(variables?: ExplorersPageConnectionQueryVariables, options?: C): Promise<{data: ExplorersPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorersPageConnectionQueryVariables, query: string}> {
        return requester<{data: ExplorersPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ExplorersPageConnectionQueryVariables, query: string}, ExplorersPageConnectionQueryVariables>(ExplorersPageConnectionDocument, variables, options);
      },
    marketplaces(variables: MarketplacesQueryVariables, options?: C): Promise<{data: MarketplacesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MarketplacesQueryVariables, query: string}> {
        return requester<{data: MarketplacesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MarketplacesQueryVariables, query: string}, MarketplacesQueryVariables>(MarketplacesDocument, variables, options);
      },
    marketplacesConnection(variables?: MarketplacesConnectionQueryVariables, options?: C): Promise<{data: MarketplacesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MarketplacesConnectionQueryVariables, query: string}> {
        return requester<{data: MarketplacesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MarketplacesConnectionQueryVariables, query: string}, MarketplacesConnectionQueryVariables>(MarketplacesConnectionDocument, variables, options);
      },
    news(variables: NewsQueryVariables, options?: C): Promise<{data: NewsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsQueryVariables, query: string}> {
        return requester<{data: NewsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsQueryVariables, query: string}, NewsQueryVariables>(NewsDocument, variables, options);
      },
    newsConnection(variables?: NewsConnectionQueryVariables, options?: C): Promise<{data: NewsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsConnectionQueryVariables, query: string}> {
        return requester<{data: NewsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsConnectionQueryVariables, query: string}, NewsConnectionQueryVariables>(NewsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  