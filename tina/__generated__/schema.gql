# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  contribute(relativePath: String): Contribute!
  contributeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContributeFilter): ContributeConnection!
  header(relativePath: String): Header!
  headerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeaderFilter): HeaderConnection!
  whatiscounterparty(relativePath: String): Whatiscounterparty!
  whatiscounterpartyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WhatiscounterpartyFilter): WhatiscounterpartyConnection!
  wallet(relativePath: String): Wallet!
  walletConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WalletFilter): WalletConnection!
  walletsPage(relativePath: String): WalletsPage!
  walletsPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WalletsPageFilter): WalletsPageConnection!
  explorer(relativePath: String): Explorer!
  explorerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ExplorerFilter): ExplorerConnection!
  explorersPage(relativePath: String): ExplorersPage!
  explorersPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ExplorersPageFilter): ExplorersPageConnection!
  marketplaces(relativePath: String): Marketplaces!
  marketplacesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MarketplacesFilter): MarketplacesConnection!
  news(relativePath: String): News!
  newsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NewsFilter): NewsConnection!
}

input DocumentFilter {
  contribute: ContributeFilter
  header: HeaderFilter
  whatiscounterparty: WhatiscounterpartyFilter
  wallet: WalletFilter
  walletsPage: WalletsPageFilter
  explorer: ExplorerFilter
  explorersPage: ExplorersPageFilter
  marketplaces: MarketplacesFilter
  news: NewsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Contribute | Header | Whatiscounterparty | Wallet | WalletsPage | Explorer | ExplorersPage | Marketplaces | News | Folder

type ContributeDevelopmentLinks {
  title: String
  url: String
  icon: String
}

type ContributeCommunityLinks {
  title: String
  url: String
  icon: String
}

type Contribute implements Node & Document {
  title: String
  subtitle: String
  developmentTitle: String
  communityTitle: String
  developmentLinks: [ContributeDevelopmentLinks]
  communityLinks: [ContributeCommunityLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ContributeDevelopmentLinksFilter {
  title: StringFilter
  url: StringFilter
  icon: StringFilter
}

input ContributeCommunityLinksFilter {
  title: StringFilter
  url: StringFilter
  icon: StringFilter
}

input ContributeFilter {
  title: StringFilter
  subtitle: StringFilter
  developmentTitle: StringFilter
  communityTitle: StringFilter
  developmentLinks: ContributeDevelopmentLinksFilter
  communityLinks: ContributeCommunityLinksFilter
}

type ContributeConnectionEdges {
  cursor: String!
  node: Contribute
}

type ContributeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContributeConnectionEdges]
}

type HeaderCtaButtons {
  label: String
  link: String
}

type Header implements Node & Document {
  title: String!
  description: String
  ctaButtons: [HeaderCtaButtons]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HeaderCtaButtonsFilter {
  label: StringFilter
  link: StringFilter
}

input HeaderFilter {
  title: StringFilter
  description: StringFilter
  ctaButtons: HeaderCtaButtonsFilter
}

type HeaderConnectionEdges {
  cursor: String!
  node: Header
}

type HeaderConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeaderConnectionEdges]
}

type WhatiscounterpartyKeyFeatures {
  title: String
  description: String
  icon: String
}

type Whatiscounterparty implements Node & Document {
  title: String!
  description: JSON
  keyFeatures: [WhatiscounterpartyKeyFeatures]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input WhatiscounterpartyKeyFeaturesFilter {
  title: StringFilter
  description: StringFilter
  icon: ImageFilter
}

input WhatiscounterpartyFilter {
  title: StringFilter
  description: RichTextFilter
  keyFeatures: WhatiscounterpartyKeyFeaturesFilter
}

type WhatiscounterpartyConnectionEdges {
  cursor: String!
  node: Whatiscounterparty
}

type WhatiscounterpartyConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WhatiscounterpartyConnectionEdges]
}

type WalletFeatures {
  dispensers: Boolean
  assetCreation: Boolean
  dex: Boolean
}

type WalletPlatforms {
  web: Boolean
  mobile: Boolean
  desktop: Boolean
}

type Wallet implements Node & Document {
  title: String!
  description: String
  link: String
  logo: String
  features: WalletFeatures
  platforms: WalletPlatforms
  isV104Compatible: Boolean
  twitter: String
  telegram: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input WalletFeaturesFilter {
  dispensers: BooleanFilter
  assetCreation: BooleanFilter
  dex: BooleanFilter
}

input WalletPlatformsFilter {
  web: BooleanFilter
  mobile: BooleanFilter
  desktop: BooleanFilter
}

input WalletFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
  logo: ImageFilter
  features: WalletFeaturesFilter
  platforms: WalletPlatformsFilter
  isV104Compatible: BooleanFilter
  twitter: StringFilter
  telegram: StringFilter
}

type WalletConnectionEdges {
  cursor: String!
  node: Wallet
}

type WalletConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WalletConnectionEdges]
}

type WalletsPage implements Node & Document {
  title: String
  subtitle: String
  info: JSON
  walletList: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input WalletsPageFilter {
  title: StringFilter
  subtitle: StringFilter
  info: RichTextFilter
  walletList: StringFilter
}

type WalletsPageConnectionEdges {
  cursor: String!
  node: WalletsPage
}

type WalletsPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WalletsPageConnectionEdges]
}

type Explorer implements Node & Document {
  title: String!
  description: String
  link: String
  logo: String
  type: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ExplorerFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
  logo: ImageFilter
  type: StringFilter
}

type ExplorerConnectionEdges {
  cursor: String!
  node: Explorer
}

type ExplorerConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ExplorerConnectionEdges]
}

type ExplorersPage implements Node & Document {
  title: String
  generalPurposeIntro: JSON
  themedIntro: JSON
  explorerList: [String]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ExplorersPageFilter {
  title: StringFilter
  generalPurposeIntro: RichTextFilter
  themedIntro: RichTextFilter
  explorerList: StringFilter
}

type ExplorersPageConnectionEdges {
  cursor: String!
  node: ExplorersPage
}

type ExplorersPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ExplorersPageConnectionEdges]
}

type MarketplacesMarketplaceList {
  name: String
  description: String
  link: String
  logo: String
}

type Marketplaces implements Node & Document {
  title: String
  introduction: JSON
  marketplaceList: [MarketplacesMarketplaceList]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input MarketplacesMarketplaceListFilter {
  name: StringFilter
  description: StringFilter
  link: StringFilter
  logo: ImageFilter
}

input MarketplacesFilter {
  title: StringFilter
  introduction: RichTextFilter
  marketplaceList: MarketplacesMarketplaceListFilter
}

type MarketplacesConnectionEdges {
  cursor: String!
  node: Marketplaces
}

type MarketplacesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MarketplacesConnectionEdges]
}

type News implements Node & Document {
  title: String!
  date: String!
  slug: String!
  status: String!
  author: String!
  excerpt: String
  categories: [String]
  tags: [String]
  image: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input NewsFilter {
  title: StringFilter
  date: DatetimeFilter
  slug: StringFilter
  status: StringFilter
  author: StringFilter
  excerpt: StringFilter
  categories: StringFilter
  tags: StringFilter
  image: ImageFilter
  body: RichTextFilter
}

type NewsConnectionEdges {
  cursor: String!
  node: News
}

type NewsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateContribute(relativePath: String!, params: ContributeMutation!): Contribute!
  createContribute(relativePath: String!, params: ContributeMutation!): Contribute!
  updateHeader(relativePath: String!, params: HeaderMutation!): Header!
  createHeader(relativePath: String!, params: HeaderMutation!): Header!
  updateWhatiscounterparty(relativePath: String!, params: WhatiscounterpartyMutation!): Whatiscounterparty!
  createWhatiscounterparty(relativePath: String!, params: WhatiscounterpartyMutation!): Whatiscounterparty!
  updateWallet(relativePath: String!, params: WalletMutation!): Wallet!
  createWallet(relativePath: String!, params: WalletMutation!): Wallet!
  updateWalletsPage(relativePath: String!, params: WalletsPageMutation!): WalletsPage!
  createWalletsPage(relativePath: String!, params: WalletsPageMutation!): WalletsPage!
  updateExplorer(relativePath: String!, params: ExplorerMutation!): Explorer!
  createExplorer(relativePath: String!, params: ExplorerMutation!): Explorer!
  updateExplorersPage(relativePath: String!, params: ExplorersPageMutation!): ExplorersPage!
  createExplorersPage(relativePath: String!, params: ExplorersPageMutation!): ExplorersPage!
  updateMarketplaces(relativePath: String!, params: MarketplacesMutation!): Marketplaces!
  createMarketplaces(relativePath: String!, params: MarketplacesMutation!): Marketplaces!
  updateNews(relativePath: String!, params: NewsMutation!): News!
  createNews(relativePath: String!, params: NewsMutation!): News!
}

input DocumentUpdateMutation {
  contribute: ContributeMutation
  header: HeaderMutation
  whatiscounterparty: WhatiscounterpartyMutation
  wallet: WalletMutation
  walletsPage: WalletsPageMutation
  explorer: ExplorerMutation
  explorersPage: ExplorersPageMutation
  marketplaces: MarketplacesMutation
  news: NewsMutation
  relativePath: String
}

input DocumentMutation {
  contribute: ContributeMutation
  header: HeaderMutation
  whatiscounterparty: WhatiscounterpartyMutation
  wallet: WalletMutation
  walletsPage: WalletsPageMutation
  explorer: ExplorerMutation
  explorersPage: ExplorersPageMutation
  marketplaces: MarketplacesMutation
  news: NewsMutation
}

input ContributeDevelopmentLinksMutation {
  title: String
  url: String
  icon: String
}

input ContributeCommunityLinksMutation {
  title: String
  url: String
  icon: String
}

input ContributeMutation {
  title: String
  subtitle: String
  developmentTitle: String
  communityTitle: String
  developmentLinks: [ContributeDevelopmentLinksMutation]
  communityLinks: [ContributeCommunityLinksMutation]
}

input HeaderCtaButtonsMutation {
  label: String
  link: String
}

input HeaderMutation {
  title: String
  description: String
  ctaButtons: [HeaderCtaButtonsMutation]
}

input WhatiscounterpartyKeyFeaturesMutation {
  title: String
  description: String
  icon: String
}

input WhatiscounterpartyMutation {
  title: String
  description: JSON
  keyFeatures: [WhatiscounterpartyKeyFeaturesMutation]
}

input WalletFeaturesMutation {
  dispensers: Boolean
  assetCreation: Boolean
  dex: Boolean
}

input WalletPlatformsMutation {
  web: Boolean
  mobile: Boolean
  desktop: Boolean
}

input WalletMutation {
  title: String
  description: String
  link: String
  logo: String
  features: WalletFeaturesMutation
  platforms: WalletPlatformsMutation
  isV104Compatible: Boolean
  twitter: String
  telegram: String
}

input WalletsPageMutation {
  title: String
  subtitle: String
  info: JSON
  walletList: [String]
}

input ExplorerMutation {
  title: String
  description: String
  link: String
  logo: String
  type: String
}

input ExplorersPageMutation {
  title: String
  generalPurposeIntro: JSON
  themedIntro: JSON
  explorerList: [String]
}

input MarketplacesMarketplaceListMutation {
  name: String
  description: String
  link: String
  logo: String
}

input MarketplacesMutation {
  title: String
  introduction: JSON
  marketplaceList: [MarketplacesMarketplaceListMutation]
}

input NewsMutation {
  title: String
  date: String
  slug: String
  status: String
  author: String
  excerpt: String
  categories: [String]
  tags: [String]
  image: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
