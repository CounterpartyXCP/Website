---
import { client } from "../../../tina/__generated__/client";
import Layout from '../../layouts/Layout.astro';
import { Tweet } from 'astro-embed';
import { Icon } from 'astro-icon/components';

export async function getStaticPaths() {
  const allNews = [];
  let hasNextPage = true;
  let cursor = null;

  while (hasNextPage) {
    const newsResponse = await client.queries.newsConnection({
      first: 100, // Fetch 100 items at a time
      after: cursor,
    });

    const edges = newsResponse.data.newsConnection?.edges || [];
    allNews.push(...edges);

    hasNextPage = newsResponse.data.newsConnection?.pageInfo?.hasNextPage;
    cursor = newsResponse.data.newsConnection?.pageInfo?.endCursor;
  }

  console.log(`Total news items fetched: ${allNews.length}`);

  const paths = allNews.map(edge => {
    const slug = edge?.node?.slug || edge?.node?._sys.filename;
    console.log(`Generated path for slug: ${slug}`);
    return {
      params: { slug },
      props: { news: edge?.node },
    };
  });

  console.log(`Total paths generated: ${paths.length}`);
  return paths;
}

const { news } = Astro.props;

// Dynamically import the MDX or MD content
let Content;
try {
  const mdxModule = await import(`../../content/news/${news?.slug || ''}.mdx`);
  Content = mdxModule.Content;
} catch (mdxError) {
  try {
    const mdModule = await import(`../../content/news/${news?.slug || ''}.md`);
    Content = mdModule.Content;
  } catch (mdError) {
    console.error('Failed to load content:', mdxError, mdError);
    Content = null;
  }
}
---

<Layout title={`${news?.title || 'News'} - Counterparty News`}>
  <main class="bg-white py-16 relative">
    <div class="absolute inset-0 bg-repeat opacity-10 z-0" style="background-image: url('/images/pattern.png');"></div>
    <div class="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
      <nav class="mb-4" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-1 text-sm">
          <li><a href="/" class="text-blue-900 hover:text-counterparty-red">Home</a></li>
          <li><span class="text-blue-900 mx-1">&gt;</span></li>
          <li><a href="/news" class="text-blue-900 hover:text-counterparty-red">News</a></li>
          <li><span class="text-blue-900 mx-1">&gt;</span></li>
          <li><span class="text-counterparty-red">{news?.title}</span></li>
        </ol>
      </nav>

      <article class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="w-full h-64 bg-[#c8c8c8] overflow-hidden">
          {news?.image ? (
            <img src={news.image} alt={news.title} class="w-full h-full object-none" />
          ) : news?.title?.toLowerCase().includes('newsletter') ? (
            <img src="/images/default-newsletter.png" alt="Default Newsletter Image" class="w-full h-full object-none" />
          ) : (
            <img src="/images/default-dev-update.png" alt="Default Development Update Image" class="w-full h-full object-none" />
          )}
        </div>
        
        <div class="p-8">
          <h1 class="text-4xl font-light text-blue-900 mb-4">{news?.title}</h1>
          
          <div class="flex items-center text-sm text-gray-400 mb-4">
            <span class="mr-2">{new Date(news?.date ?? Date.now()).toLocaleDateString()}</span>
            {news?.author && <span class="text-counterparty-red mr-2">by {news.author}</span>}
            {news?.tags && news.tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {news.tags.map(tag => (
                  <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{tag}</span>
                ))}
              </div>
            )}
          </div>

          <div class="prose max-w-none news-content">
            {Content ? <Content components={{ Tweet }} /> : <p>Content not found.</p>}
          </div>
        </div>
      </article>
    </div>
  </main>
</Layout>

<style>
  main::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/images/pattern.png');
    background-repeat: repeat;
    opacity: 0.6;
    z-index: 0;
  }

  .news-content {
    color: #293C70;
    font-family: "Readex Pro", sans-serif;
    font-size: 1.1rem;
    font-style: normal;
    font-weight: 300;
    line-height: 160%;
    letter-spacing: -0.4px;

    h1 {
      color: #293C70;
      font-family: "Readex Pro", sans-serif;
      font-size: 2rem;
      font-style: normal;
      font-weight: 400;
      line-height: 160%;
      letter-spacing: -1.6px;
      margin-top: 2rem;
      margin-bottom: 1rem;
    }

    h2 {
      color: #293C70;
      font-family: "Readex Pro", sans-serif;
      font-size: 1.6rem;
      font-style: normal;
      font-weight: 400;
      line-height: 160%;
      letter-spacing: -1.2px;
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
    }

    h3 {
      color: #293C70;
      font-family: "Readex Pro", sans-serif;
      font-size: 1.4rem;
      font-style: normal;
      font-weight: 400;
      line-height: 160%;
      letter-spacing: -1.2px;
      margin-top: 1.2rem;
      margin-bottom: 0.5rem;
    }

    h4 {
      color: #293C70;
      font-family: "Readex Pro", sans-serif;
      font-size: 1.25rem;
      font-style: normal;
      font-weight: 400;
      line-height: 130%;
      letter-spacing: -1.2px;
      margin-top: 1rem;
      margin-bottom: 0.3rem;
    }

    p {
      margin-bottom: 1rem;
    }

    a {
      color: #ef4444;
      text-decoration: none;

      &:hover {
        text-decoration: underline;
      }
    }

    ul {
      list-style-type: disc;
      padding-left: 1.5em;
      margin-bottom: 1rem;
    }

    li {
      margin-bottom: 0.5rem;
    }

    pre {
      background-color: #f4f4f4;
      border: 1px solid #ddd;
      border-left: 3px solid #f36d33;
      color: #6e6e6e;
      page-break-inside: avoid;
      font-family: monospace;
      font-size: 15px;
      line-height: 1.6;
      margin-bottom: 1.6em;
      max-width: 100%;
      overflow: auto;
      padding: 1em 1.5em;
      display: block;
      word-wrap: break-word;
    }

    code {
      background-color: #f4f4f4;
      border-radius: 3px;
      color: #6e6e6e;
      font-family: monospace;
      padding: 0.2em 0.4em;
      font-size: 1rem;
    }

    pre code {
      background-color: transparent;
      border: none;
      padding: 0;
    }
  }

  /* Add styles for embedded tweets */
  :global(.twitter-tweet) {
    margin: 1rem auto;
    max-width: 550px;
  }
</style>

<!-- Add Twitter's widget.js script -->
<script async src="https://platform.twitter.com/widgets.js"></script>
