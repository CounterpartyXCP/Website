---
import { client } from "../../../tina/__generated__/client";
import Layout from '../../layouts/Layout.astro';
import type { Page } from 'astro';
import { Icon } from 'astro-icon/components';

interface Props {
  page: Page;
}

interface NewsItem {
  date: string;
  title: string;
  image?: string;
  author?: string;
  tags?: string[];
  excerpt?: string;
  slug?: string;
  _sys: {
    filename: string;
  };
}

export async function getStaticPaths({ paginate }: { paginate: any }) {
  const newsResponse = await client.queries.newsConnection({});
  const allNews = newsResponse.data.newsConnection?.edges?.map(edge => edge?.node) || [];
  
  // Filtrer les actualités publiées
  const publishedNews = allNews.filter(news => news && news.status === "published");

  // Trier les actualités par date (du plus récent au plus ancien)
  publishedNews.sort((a, b) => {
    if (!a || !b) return 0;
    return new Date(b.date).getTime() - new Date(a.date).getTime();
  });

  return paginate(publishedNews, { pageSize: 10 });
}

const { page } = Astro.props;

// Extract all unique tags and authors
const allTags = [...new Set(page.data.flatMap(news => news.tags || []))];
const allAuthors = [...new Set(page.data.map(news => news.author).filter(Boolean))];

// Group news items by year and month
const groupedNews = page.data.reduce((acc, news) => {
  const date = new Date(news.date);
  const year = date.getFullYear();
  const month = date.toLocaleString('default', { month: 'long' });
  
  if (!acc[year]) acc[year] = {};
  if (!acc[year][month]) acc[year][month] = [];
  
  acc[year][month].push(news);
  return acc;
}, {});

---

<Layout title="Counterparty news">
  <main class="bg-white py-16 relative">
    <div class="absolute inset-0 bg-repeat opacity-10 z-0" style="background-image: url('/images/pattern.png');"></div>
    <div class="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
      <nav class="mb-4" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-1 text-sm">
          <li><a href="/" class="text-blue-900 hover:text-counterparty-red">Home</a></li>
          <li><span class="text-counterparty-red mx-1">&gt;</span></li>
          <li><span class="text-counterparty-red">News</span></li>
        </ol>
      </nav>
      <h1 class="text-4xl font-light text-blue-900 mb-8">Counterparty news</h1>

      <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h3 class="text-lg font-semibold text-blue-900 mb-2">Tags:</h3>
            <div class="flex flex-wrap gap-2" id="tag-filter">
              {allTags.map(tag => (
                <button class="px-3 py-1 text-sm bg-gray-100 text-gray-600 rounded-full hover:bg-red-100 hover:text-counterparty-red transition-colors duration-300" data-tag={tag}>{tag}</button>
              ))}
            </div>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-blue-900 mb-2">Author:</h3>
            <div class="relative" x-data="{ open: false }">
              <div 
                @click="open = !open" 
                class="p-2 border border-gray-300 rounded cursor-pointer flex justify-between items-center"
              >
                <span id="selected-authors">All authors</span>
                <Icon name="fa6-solid:chevron-down" class="w-4 h-4 text-gray-500" />
              </div>
              <div 
                x-show="open" 
                @click.away="open = false"
                class="absolute z-10 w-full bg-white border border-gray-300 mt-1 rounded shadow-lg hidden"
              >
                <div class="p-2">
                  <label class="flex items-center">
                    <input type="checkbox" id="all-authors" checked class="mr-2">
                    <span>All authors</span>
                  </label>
                </div>
                {allAuthors.map(author => (
                  <div class="p-2">
                    <label class="flex items-center">
                      <input type="checkbox" id={`author-${author}`} value={author} class="mr-2">
                      <span>{author}</span>
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-blue-900 mb-2">Search:</h3>
            <div class="relative">
              <input type="text" id="search-input" placeholder="Search..." class="w-full p-2 border border-gray-300 rounded pr-10">
              <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="space-y-12">
        {Object.entries(groupedNews).reverse().map(([year, months]) => (
          <div>
            <h2 class="text-3xl font-light text-blue-900 mb-6 border-b border-counterparty-red pb-2">{year}</h2>
            {(Object.entries(months) as [string, NewsItem[]][]).sort((a, b) => {
              return new Date(b[1][0].date).getTime() - new Date(a[1][0].date).getTime();
            }).map(([month, newsItems]) => (
              <div class="mb-8">
                <h3 class="text-2xl font-light text-blue-900 mb-4">{month}</h3>
                {newsItems.map((news) => (
                  <article class="bg-white rounded-lg shadow-md overflow-hidden mb-6 flex h-64">
                    <div class="w-1/3 h-full">
                      {news.image ? (
                        <img src={news.image} alt={news.title} class="w-full h-full object-cover" />
                      ) : news.title.toLowerCase().includes('newsletter') ? (
                        <img src="/images/default-newsletter.png" alt="Default Newsletter Image" class="w-full h-full object-cover" />
                      ) : (
                        <img src="/images/default-dev-update.png" alt="Default Development Update Image" class="w-full h-full object-cover" />
                      )}
                    </div>
                    <div class="w-2/3 p-6 flex flex-col justify-between">
                      <div>
                        <h4 class="text-xl font-normal text-blue-900 mb-2">{news.title}</h4>
                        <p class="text-sm text-gray-600 mb-2">
                          <span class="mr-2">{new Date(news.date).toLocaleDateString()}</span>
                          {news.author && <span>by {news.author}</span>}
                        </p>
                        {news.tags && news.tags.length > 0 && (
                          <div class="flex flex-wrap gap-2 mb-4">
                            {news.tags.map((tag: string) => (
                              <span class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded-full">{tag}</span>
                            ))}
                          </div>
                        )}
                        <p class="text-gray-700 mb-4 line-clamp-3">{news.excerpt}</p>
                      </div>
                      <a href={`/news/${news.slug || news._sys.filename}`} class="text-counterparty-red hover:text-red-600 font-medium transition duration-300 mt-auto inline-flex items-center">
                        Read More <Icon name="fa6-solid:chevron-right" class="w-3 h-3 ml-1" />
                      </a>
                    </div>
                  </article>
                ))}
              </div>
            ))}
          </div>
        ))}
      </div>
      
      <nav class="flex justify-center mt-12">
        {page.url.prev && <a href={page.url.prev} class="mx-1 px-3 py-2 bg-gray-100 text-blue-900 rounded hover:bg-gray-200 transition duration-300">←</a>}
        
        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
          <a 
            href={pageNum === 1 ? '/news' : `/news/${pageNum}`} 
            class={`mx-1 px-3 py-2 rounded transition duration-300 ${page.currentPage === pageNum ? 'bg-counterparty-red text-white' : 'bg-gray-100 text-blue-900 hover:bg-gray-200'}`}
          >
            {pageNum}
          </a>
        ))}
        
        {page.url.next && <a href={page.url.next} class="mx-1 px-3 py-2 bg-gray-100 text-blue-900 rounded hover:bg-gray-200 transition duration-300">→</a>}
      </nav>
    </div>
  </main>
</Layout>

<style>
  main::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/images/pattern.png');
    background-repeat: repeat;
    opacity: 0.6;
    z-index: 0;
  }
</style>

<script>
  const tagButtons = document.querySelectorAll('[data-tag]');
  const newsItems = document.querySelectorAll('article');
  const searchInput = document.getElementById('search-input') as HTMLInputElement;

  const multiselectSelected = document.getElementById('selected-authors');
  const authorDropdown = document.querySelector('[x-show="open"]') as HTMLElement;
  const allAuthorsCheckbox = document.getElementById('all-authors') as HTMLInputElement;
  const authorCheckboxes = document.querySelectorAll('input[type="checkbox"]:not(#all-authors)') as NodeListOf<HTMLInputElement>;

  function applyFilters() {
    const selectedTags = Array.from(document.querySelectorAll('[data-tag].active')).map(el => el.getAttribute('data-tag'));
    const selectedAuthors = Array.from(authorCheckboxes).filter(cb => cb.checked).map(cb => cb.value);
    const searchTerm = searchInput.value.toLowerCase();

    newsItems.forEach(item => {
      const tags = Array.from(item.querySelectorAll('.text-xs.px-2.py-1.bg-gray-100')).map(tag => tag.textContent?.trim() || '');
      const author = item.querySelector('.text-sm.text-gray-600 span:last-child')?.textContent?.replace('by ', '').trim() || '';
      const title = item.querySelector('h4')?.textContent?.toLowerCase() || '';
      const excerpt = item.querySelector('.text-gray-700.mb-4')?.textContent?.toLowerCase() || '';

      const tagMatch = selectedTags.length === 0 || selectedTags.some(tag => tags.includes(tag));
      const authorMatch = allAuthorsCheckbox.checked || selectedAuthors.includes(author);
      const searchMatch = !searchTerm || title.includes(searchTerm) || excerpt.includes(searchTerm);

      item.style.display = tagMatch && authorMatch && searchMatch ? '' : 'none';
    });

    updateGroupVisibility();
    updateEmptyState();
  }

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      button.classList.toggle('active');
      applyFilters();
    });
  });

  searchInput.addEventListener('input', applyFilters);

  function updateGroupVisibility() {
    const yearGroups = document.querySelectorAll('.space-y-12 > div');
    yearGroups.forEach(yearGroup => {
      const visibleItems = yearGroup.querySelectorAll('article:not([style*="display: none"])');
      (yearGroup as HTMLElement).style.display = visibleItems.length > 0 ? '' : 'none';

      const monthGroups = yearGroup.querySelectorAll('.mb-8');
      monthGroups.forEach(monthGroup => {
        const visibleMonthItems = monthGroup.querySelectorAll('article:not([style*="display: none"])');
        (monthGroup as HTMLElement).style.display = visibleMonthItems.length > 0 ? '' : 'none';
      });
    });
  }

  function updateEmptyState() {
    const visibleItems = document.querySelectorAll('article:not([style*="display: none"])');
    const emptyState = document.querySelector('.empty-state') || createEmptyState();

    const newsList = document.querySelector('.space-y-12');
    if (visibleItems.length === 0 && newsList) {
      newsList.appendChild(emptyState);
    } else {
      emptyState.remove();
    }
  }

  function createEmptyState() {
    const div = document.createElement('div');
    div.className = 'empty-state';
    div.textContent = 'No news items match the selected filters.';
    return div;
  }

  multiselectSelected?.addEventListener('click', () => {
    authorDropdown.classList.toggle('hidden');
  });

  document.addEventListener('click', (event) => {
    if (!(event.target as HTMLElement).closest('.relative')) {
      authorDropdown.classList.add('hidden');
    }
  });

  allAuthorsCheckbox.addEventListener('change', () => {
    authorCheckboxes.forEach((checkbox) => {
      checkbox.checked = allAuthorsCheckbox.checked;
    });
    updateSelectedAuthors();
    applyFilters();
  });

  authorCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener('change', () => {
      updateSelectedAuthors();
      applyFilters();
    });
  });

  function updateSelectedAuthors() {
    const selectedAuthors = Array.from(authorCheckboxes)
      .filter((checkbox) => checkbox.checked)
      .map((checkbox) => checkbox.value);

    if (selectedAuthors.length === 0 || selectedAuthors.length === authorCheckboxes.length) {
      allAuthorsCheckbox.checked = true;
      const span = multiselectSelected?.querySelector('span');
      if (span) span.textContent = 'All authors';
    } else {
      allAuthorsCheckbox.checked = false;
      const span = multiselectSelected?.querySelector('span');
      if (span) span.textContent = selectedAuthors.join(', ');
    }
  }

  // Initial call to set up the filters
  applyFilters();

  // Persist selected tags
  const storedTags = localStorage.getItem('selectedTags');
  if (storedTags) {
    const selectedTags = JSON.parse(storedTags);
    tagButtons.forEach(button => {
      if (selectedTags.includes(button.getAttribute('data-tag'))) {
        button.classList.add('active');
      }
    });
    applyFilters();
  }

  // Save selected tags to localStorage when changed
  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      const selectedTags = Array.from(document.querySelectorAll('[data-tag].active')).map(el => el.getAttribute('data-tag'));
      localStorage.setItem('selectedTags', JSON.stringify(selectedTags));
    });
  });
</script>

<style>
  .empty-state {
    text-align: center;
    padding: 2rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    color: #6c757d;
    margin-top: 2rem;
  }
</style>
