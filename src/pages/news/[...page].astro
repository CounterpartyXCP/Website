---
import { client } from "../../../tina/__generated__/client";
import Layout from '../../layouts/Layout.astro';
import type { Page } from 'astro';

interface Props {
  page: Page;
}

interface NewsItem {
  date: string;
  title: string;
  image?: string;
  author?: string;
  tags?: string[];
  excerpt?: string;
  slug?: string;
  _sys: {
    filename: string;
  };
}

export async function getStaticPaths({ paginate }: { paginate: any }) {
  const newsResponse = await client.queries.newsConnection({});
  const allNews = newsResponse.data.newsConnection?.edges?.map(edge => edge?.node) || [];
  
  // Filtrer les actualités publiées
  const publishedNews = allNews.filter(news => news && news.status === "published");

  // Trier les actualités par date (du plus récent au plus ancien)
  publishedNews.sort((a, b) => {
    if (!a || !b) return 0;
    return new Date(b.date).getTime() - new Date(a.date).getTime();
  });

  return paginate(publishedNews, { pageSize: 10 });
}

const { page } = Astro.props;

// Extract all unique tags and authors
const allTags = [...new Set(page.data.flatMap(news => news.tags || []))];
const allAuthors = [...new Set(page.data.map(news => news.author).filter(Boolean))];

// Group news items by year and month
const groupedNews = page.data.reduce((acc, news) => {
  const date = new Date(news.date);
  const year = date.getFullYear();
  const month = date.toLocaleString('default', { month: 'long' });
  
  if (!acc[year]) acc[year] = {};
  if (!acc[year][month]) acc[year][month] = [];
  
  acc[year][month].push(news);
  return acc;
}, {});

---

<Layout title="Counterparty news">
  <main class="news-page">
    <div class="container">
      <nav class="breadcrumb" aria-label="Breadcrumb">
        <ol>
          <li><a href="/">Home</a></li>
          <li><span aria-current="page">News</span></li>
        </ol>
      </nav>
      <h1>Counterparty news</h1>

      <div class="filters-container">
        <div class="filter-group">
          <h3>Tags:</h3>
          <div class="tag-list" id="tag-filter">
            {allTags.map(tag => (
              <button class="tag-button" data-tag={tag}>{tag}</button>
            ))}
          </div>
        </div>
        <div class="filter-group">
          <h3>Author:</h3>
          <div class="custom-multiselect">
            <div class="multiselect-selected" id="selected-authors">
              <span>All authors</span>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="multiselect-dropdown" id="author-dropdown">
              <div class="multiselect-option">
                <input type="checkbox" id="all-authors" checked>
                <label for="all-authors">All authors</label>
              </div>
              {allAuthors.map(author => (
                <div class="multiselect-option">
                  <input type="checkbox" id={`author-${author}`} value={author}>
                  <label for={`author-${author}`}>{author}</label>
                </div>
              ))}
            </div>
          </div>
        </div>
        <div class="filter-group">
          <h3>Search:</h3>
          <div class="search-container">
            <input type="text" id="search-input" placeholder="Search..." class="search-input">
            <i class="fas fa-search search-icon"></i>
          </div>
        </div>
      </div>

      <div class="news-list">
        {Object.entries(groupedNews).reverse().map(([year, months]) => (
          <div class="year-group">
            <h2 class="year-header">{year}</h2>
            {(Object.entries(months) as [string, NewsItem[]][]).sort((a, b) => {
              return new Date(b[1][0].date).getTime() - new Date(a[1][0].date).getTime();
            }).map(([month, newsItems]) => (
              <div class="month-group">
                <h3 class="month-header">{month}</h3>
                {newsItems.map((news) => (
                  <article class="news-item">
                    <div class="news-image">
                      {news.image ? (
                        <img src={news.image} alt={news.title} />
                      ) : news.title.toLowerCase().includes('newsletter') ? (
                        <img src="/images/default-newsletter.png" alt="Default Newsletter Image" />
                      ) : (
                        <img src="/images/default-dev-update.png" alt="Default Development Update Image" />
                      )}
                    </div>
                    <div class="news-content">
                      <h4>{news.title}</h4>
                      <p class="meta">
                        <span class="date">{new Date(news.date).toLocaleDateString()}</span>
                        {news.author && <span class="author">by {news.author}</span>}
                      </p>
                      {news.tags && news.tags.length > 0 && (
                        <div class="tags">
                          {news.tags.map((tag: string) => (
                            <span class="tag">{tag}</span>
                          ))}
                        </div>
                      )}
                      <p class="excerpt">{news.excerpt}</p>
                      <a href={`/news/${news.slug || news._sys.filename}`} class="read-more">Read More <i class="fas fa-chevron-right"></i></a>
                    </div>
                  </article>
                ))}
              </div>
            ))}
          </div>
        ))}
      </div>
      
      <nav class="pagination">
        {page.url.prev && <a href={page.url.prev} class="pagination-arrow">←</a>}
        
        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
          <a 
            href={pageNum === 1 ? '/news' : `/news/${pageNum}`} 
            class={`pagination-number ${page.currentPage === pageNum ? 'active' : ''}`}
          >
            {pageNum}
          </a>
        ))}
        
        {page.url.next && <a href={page.url.next} class="pagination-arrow">→</a>}
      </nav>
    </div>
  </main>
</Layout>

<script>
  const tagButtons = document.querySelectorAll('.tag-button');
  const newsItems = document.querySelectorAll('.news-item');
  const yearGroups = document.querySelectorAll('.year-group');
  const monthGroups = document.querySelectorAll('.month-group');
  const searchInput = document.getElementById('search-input') as HTMLInputElement;

  const multiselectSelected = document.getElementById('selected-authors');
  const authorDropdown = document.getElementById('author-dropdown');
  const allAuthorsCheckbox = document.getElementById('all-authors') as HTMLInputElement;
  const authorCheckboxes = authorDropdown?.querySelectorAll('input[type="checkbox"]:not(#all-authors)') as NodeListOf<HTMLInputElement>;

  function applyFilters() {
    const selectedTags = Array.from(document.querySelectorAll('.tag-button.active')).map(button => (button as HTMLElement).getAttribute('data-tag'));
    const selectedAuthors = Array.from(authorCheckboxes)
      .filter((checkbox) => checkbox.checked)
      .map((checkbox) => checkbox.value);
    const searchTerm = searchInput.value.toLowerCase();

    newsItems.forEach(item => {
      const itemTags = Array.from(item.querySelectorAll('.tag')).map(tag => tag.textContent);
      const itemAuthor = item.querySelector('.author')?.textContent?.replace('by ', '') || '';
      const itemTitle = item.querySelector('h4')?.textContent?.toLowerCase() || '';
      const itemExcerpt = item.querySelector('.excerpt')?.textContent?.toLowerCase() || '';

      const tagMatch = selectedTags.length === 0 || selectedTags.some(tag => itemTags.includes(tag));
      const authorMatch = allAuthorsCheckbox.checked || selectedAuthors.includes(itemAuthor);
      const searchMatch = !searchTerm || itemTitle.includes(searchTerm) || itemExcerpt.includes(searchTerm);

      if (tagMatch && authorMatch && searchMatch) {
        (item as HTMLElement).style.display = '';
      } else {
        (item as HTMLElement).style.display = 'none';
      }
    });

    updateGroupVisibility();
    updateEmptyState();
  }

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      button.classList.toggle('active');
      applyFilters();
    });
  });

  searchInput.addEventListener('input', applyFilters);

  function updateGroupVisibility() {
    yearGroups.forEach(yearGroup => {
      const visibleItems = yearGroup.querySelectorAll('.news-item:not([style*="display: none"])');
      (yearGroup as HTMLElement).style.display = visibleItems.length > 0 ? '' : 'none';

      const monthGroups = yearGroup.querySelectorAll('.month-group');
      monthGroups.forEach(monthGroup => {
        const visibleMonthItems = monthGroup.querySelectorAll('.news-item:not([style*="display: none"])');
        (monthGroup as HTMLElement).style.display = visibleMonthItems.length > 0 ? '' : 'none';
      });
    });
  }

  function updateEmptyState() {
    const visibleItems = document.querySelectorAll('.news-item:not([style*="display: none"])');
    const emptyState = document.querySelector('.empty-state') || createEmptyState();

    const newsList = document.querySelector('.news-list');
    if (visibleItems.length === 0 && newsList) {
      newsList.appendChild(emptyState);
    } else {
      emptyState.remove();
    }
  }

  function createEmptyState() {
    const div = document.createElement('div');
    div.className = 'empty-state';
    div.textContent = 'No news items match the selected filters.';
    return div;
  }

  multiselectSelected?.addEventListener('click', () => {
    const isOpen = authorDropdown?.style.display === 'block';
    if (authorDropdown) authorDropdown.style.display = isOpen ? 'none' : 'block';
    multiselectSelected.classList.toggle('active', !isOpen);
  });

  document.addEventListener('click', (event) => {
    if (!(event.target as HTMLElement).closest('.custom-multiselect')) {
      if (authorDropdown) authorDropdown.style.display = 'none';
    }
  });

  allAuthorsCheckbox.addEventListener('change', () => {
    authorCheckboxes.forEach((checkbox) => {
      checkbox.checked = allAuthorsCheckbox.checked;
    });
    updateSelectedAuthors();
    applyFilters();
  });

  authorCheckboxes.forEach((checkbox) => {
    checkbox.addEventListener('change', () => {
      updateSelectedAuthors();
      applyFilters();
    });
  });

  function updateSelectedAuthors() {
    const selectedAuthors = Array.from(authorCheckboxes)
      .filter((checkbox) => checkbox.checked)
      .map((checkbox) => checkbox.value);

    if (selectedAuthors.length === 0 || selectedAuthors.length === authorCheckboxes.length) {
      allAuthorsCheckbox.checked = true;
      const span = multiselectSelected?.querySelector('span');
      if (span) span.textContent = 'All authors';
    } else {
      allAuthorsCheckbox.checked = false;
      const span = multiselectSelected?.querySelector('span');
      if (span) span.textContent = selectedAuthors.join(', ');
    }
  }
</script>

<style>
  .news-page {
    position: relative;
    background-color: #ffffff;
    background-image: url('/images/pattern.png');
  }

  .breadcrumb {
    margin-bottom: 1rem;
    font-size: 0.9rem;
    padding-top: 1rem;
  }

  .breadcrumb ol {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
  }

  .breadcrumb li {
    display: flex;
    align-items: center;
  }

  .breadcrumb li:not(:last-child)::after {
    content: '>';
    margin: 0 0.5rem;
    color: #666;
  }

  .breadcrumb a {
    color: #293C70;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .breadcrumb span {
    color: #EC1550;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #293C70;
    font-weight: 300; /* Readex Pro Light */
  }

  .filters-container {
    background-color: white;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
  }

  .filter-group {
    flex: 1 1 200px;
  }

  .filter-group h3 {
    margin-bottom: 0.5rem;
    font-size: 1rem;
    color: #2c3e50;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag-button {
    background-color: #F8F8F8;
    color: #626B75;
    border: none;
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .tag-button:hover, .tag-button.active {
    background-color: #FDEBF0;
    color: #EC1550;
  }

  .custom-select {
    position: relative;
    width: 100%;
  }

  .author-select {
    width: 100%;
    padding: 0.5rem;
    padding-right: 2rem;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 1rem;
    background-color: white;
    color: #2c3e50;
    appearance: none;
    cursor: pointer;
  }

  .select-arrow {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 5px solid #2c3e50;
    pointer-events: none;
  }

  .search-container {
    position: relative;
    width: 100%;
  }

  .search-input {
    width: 100%;
    padding: 0.5rem;
    padding-right: 2rem;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 1rem;
    background-color: white;
    color: #2c3e50;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    color: #2c3e50;
    pointer-events: none;
  }

  .author-select:focus, .search-input:focus {
    outline: none;
    border-color: #e74c3c;
    box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.2);
  }

  .news-list {
    /* Remove background-color and box-shadow */
    padding: 2rem 0;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .year-group {
    margin-bottom: 2rem;
  }

  .year-header {
    font-size: 24px;
    color: #293C70;
    margin-bottom: 1rem;
    font-weight: 400; /* Readex Pro Regular */
    border-bottom: 1px solid #EC1550;
    padding-bottom: 0.5rem;
  }

  .month-group {
    margin-bottom: 2rem;
  }

  .month-header {
    font-size: 1.25rem;
    color: #293C70;
    margin-bottom: 1.5rem;
    font-weight: 300; /* Readex Pro Light */
  }

  .news-item {
    display: flex;
    flex-direction: row; /* Keep row direction to place image on the left */
    background-color: #ffffff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.3s ease;
    margin-bottom: 1.5rem;
  }

  .news-item:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  .news-content {
    flex: 1;
    padding: 1.5rem;
  }

  .news-image {
    width: 300px; /* Adjust as needed */
    min-width: 300px; /* Ensure the image maintains its width */
    height: auto;
    overflow: hidden;
  }

  .news-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .news-item h4 {
    font-size: 32px;
    margin-bottom: 0.5rem;
    color: #293C70;
    font-weight: 300; /* Readex Pro Light */
  }

  .meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 0.5rem;
  }

  .date {
    font-weight: 250;
    color: #A2A2A2;
  }

  .author {
    font-weight: 250;
    color: #EC1550;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .tag {
    background-color: #F8F8F8;
    color: #626B75;
    padding: 0.25rem 0.75rem;
    border-radius: 16px;
    font-size: 0.75rem;
  }

  .excerpt {
    margin-bottom: 1rem;
    color: #293C70;
    font-weight: 250;
  }

  .read-more {
    display: inline-flex;
    align-items: center;
    color: #EC1550;
    text-decoration: none;
    font-weight: 400; /* Readex Pro Regular */
    transition: color 0.3s ease;
  }

  .read-more i {
    margin-left: 0.5rem;
    font-size: 0.75em;
    transition: transform 0.3s ease;
  }

  .read-more:hover {
    text-decoration: none;
  }

  .read-more:hover i {
    transform: translateX(3px);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    padding-bottom: 3rem;
  }

  .pagination-arrow,
  .pagination-number {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 8px;
    text-decoration: none;
    color: #293C70;
    font-weight: 500;
    font-size: 14px;
    transition: all 0.3s ease;
    background-color: white;
    border: 1px solid #e0e0e0;
  }

  .pagination-arrow {
    padding: 0 0.5rem;
  }

  .pagination-arrow:hover,
  .pagination-number:hover {
    background-color: #f0f0f0;
  }

  .pagination-number.active {
    background-color: #EC1550;
    color: white;
    border-color: #EC1550;
  }

  .empty-state {
    text-align: center;
    padding: 2rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    color: #6c757d;
  }

  .custom-multiselect {
    position: relative;
    width: 100%;
  }

  .multiselect-selected {
    width: 100%;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 1rem;
    background-color: white;
    color: #2c3e50;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .multiselect-selected i {
    font-size: 0.8em;
    transition: transform 0.3s ease;
  }

  .multiselect-selected.active i {
    transform: rotate(180deg);
  }

  .multiselect-dropdown {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: white;
    border: 1px solid #ccc;
    border-top: none;
    border-radius: 0 0 4px 4px;
    max-height: 200px;
    overflow-y: auto;
    z-index: 10;
  }

  .multiselect-option {
    padding: 0.5rem;
    display: flex;
    align-items: center;
  }

  .multiselect-option:hover {
    background-color: #f0f0f0;
  }

  .multiselect-option input[type="checkbox"] {
    margin-right: 0.5rem;
  }

  @media (max-width: 768px) {
    .news-item {
      flex-direction: column; /* Stack image above content on mobile */
    }
    .news-image {
      width: 100%;
      height: 200px;
    }
  }

  .month-group {
    margin-bottom: 2rem; /* Increase space between month groups */
  }

  .month-header {
    font-size: 1.5rem;
    color: #34495e;
    margin-bottom: 1.5rem; /* Increase space below month header */
  }

  /* Adjust the existing h2 styles for news item titles */
  .news-item h4 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
    color: #2c3e50;
  }
</style>